/*
    run the file to create the first roid_address smart contract
    npx ts-node -P tsconfig.server.json ./blockchain/ethereum_env.ts
*/ 

import Web3 from 'web3';

export { web3, roid_address_smart_contract_instance, deploy_ro_smartcontract, get_ro_contract_address, get_ro_smart_contract_instance, deploy_roid_address };


// creating Web3 instance to localhost Hardhat
const web3 = new Web3('http://localhost:8545');

//ganache first wallet address
const get_public_wallet = async () => {
    const accounts = await web3.eth.getAccounts();
    return accounts[0];
}

// ================================ smart contract - roid_address =============================================
const roid_address_abi = [
    {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            }
        ],
        "name": "OwnableInvalidOwner",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "account",
                "type": "address"
            }
        ],
        "name": "OwnableUnauthorizedAccount",
        "type": "error"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
            },
            {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            }
        ],
        "name": "getSmartContract",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hash",
                "type": "string"
            },
            {
                "internalType": "address",
                "name": "smartContract_address",
                "type": "address"
            }
        ],
        "name": "setSmartContract",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            },
            {
                "internalType": "address",
                "name": "vaultBX_address",
                "type": "address"
            }
        ],
        "name": "setVaultBX",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            },
            {
                "internalType": "address",
                "name": "vaultBX_address",
                "type": "address"
            }
        ],
        "name": "verifyVaultBX",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
];

const roid_address_bytecode ="608060405234801561000f575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610081575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100789190610196565b60405180910390fd5b6100908161009660201b60201c565b506101af565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61018082610157565b9050919050565b61019081610176565b82525050565b5f6020820190506101a95f830184610187565b92915050565b610881806101bc5f395ff3fe608060405234801561000f575f80fd5b506004361061007b575f3560e01c8063715018a611610059578063715018a6146100fb5780638da5cb5b14610105578063c6c4fbc614610123578063f2fde38b1461013f5761007b565b806340763c3e1461007f5780634986b388146100af578063648451a8146100df575b5f80fd5b61009960048036038101906100949190610648565b61015b565b6040516100a691906106ce565b60405180910390f35b6100c960048036038101906100c49190610711565b6101a9565b6040516100d69190610785565b60405180910390f35b6100f960048036038101906100f49190610711565b61021e565b005b610103610286565b005b61010d610299565b60405161011a91906106ce565b60405180910390f35b61013d60048036038101906101389190610711565b6102c0565b005b6101596004803603810190610154919061079e565b610328565b005b5f6101646103ac565b6002826040516101749190610835565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff166001846040516101d19190610835565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b6102266103ac565b806001836040516102379190610835565b90815260200160405180910390205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61028e6103ac565b6102975f610433565b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102c86103ac565b806002836040516102d99190610835565b90815260200160405180910390205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6103306103ac565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103a0575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161039791906106ce565b60405180910390fd5b6103a981610433565b50565b6103b46104f4565b73ffffffffffffffffffffffffffffffffffffffff166103d2610299565b73ffffffffffffffffffffffffffffffffffffffff1614610431576103f56104f4565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161042891906106ce565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61055a82610514565b810181811067ffffffffffffffff8211171561057957610578610524565b5b80604052505050565b5f61058b6104fb565b90506105978282610551565b919050565b5f67ffffffffffffffff8211156105b6576105b5610524565b5b6105bf82610514565b9050602081019050919050565b828183375f83830152505050565b5f6105ec6105e78461059c565b610582565b90508281526020810184848401111561060857610607610510565b5b6106138482856105cc565b509392505050565b5f82601f83011261062f5761062e61050c565b5b813561063f8482602086016105da565b91505092915050565b5f6020828403121561065d5761065c610504565b5b5f82013567ffffffffffffffff81111561067a57610679610508565b5b6106868482850161061b565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106b88261068f565b9050919050565b6106c8816106ae565b82525050565b5f6020820190506106e15f8301846106bf565b92915050565b6106f0816106ae565b81146106fa575f80fd5b50565b5f8135905061070b816106e7565b92915050565b5f806040838503121561072757610726610504565b5b5f83013567ffffffffffffffff81111561074457610743610508565b5b6107508582860161061b565b9250506020610761858286016106fd565b9150509250929050565b5f8115159050919050565b61077f8161076b565b82525050565b5f6020820190506107985f830184610776565b92915050565b5f602082840312156107b3576107b2610504565b5b5f6107c0848285016106fd565b91505092915050565b5f81519050919050565b5f81905092915050565b5f5b838110156107fa5780820151818401526020810190506107df565b5f8484015250505050565b5f61080f826107c9565b61081981856107d3565b93506108298185602086016107dd565b80840191505092915050565b5f6108408284610805565b91508190509291505056fea2646970667358221220517f086023bd659bbece3b63987eb5c26b0dede95e729bc327c30508f5cdee4664736f6c63430008180033";

let roid_address_smart_contract_instance : any;

const deploy_roid_address = async (platform_name : string) => {

    try{
        const public_wallet = await get_public_wallet();

        const contract = new web3.eth.Contract(roid_address_abi as any);
        const contract_instance = await contract.deploy({
            data: roid_address_bytecode,
            arguments: []
        })
        .send({
            from: public_wallet,
            gas: 5000000,      // 增加 gas 限制
            gasPrice: '900000000'    
        });

        roid_address_smart_contract_instance = new web3.eth.Contract(roid_address_abi as any, contract_instance.options.address);

        console.log(`[deploy smart contract] roid_address deploy for '${platform_name}' at : ${contract_instance.options.address} [OK]`);

        return contract_instance.options.address;
    }catch(err){
        console.log(`[deploy smart contract] roid_address error : ${err}`);
    }
}

// ================================ smart contract - ro_smartcontract  =================================================
const ro_smartcontract_abi = [
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_RO_id_hashing",
                "type": "string"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "InvalidInitialization",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "NotInitializing",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            }
        ],
        "name": "OwnableInvalidOwner",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "account",
                "type": "address"
            }
        ],
        "name": "OwnableUnauthorizedAccount",
        "type": "error"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "uint64",
                "name": "version",
                "type": "uint64"
            }
        ],
        "name": "Initialized",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
            },
            {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
    },
    {
        "inputs": [],
        "name": "RO_id_hashing",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "name": "dataAuthMap",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "string[]",
                        "name": "roles",
                        "type": "string[]"
                    },
                    {
                        "internalType": "string[]",
                        "name": "goals",
                        "type": "string[]"
                    }
                ],
                "internalType": "struct RO_smart_contract.DataAuthFormat",
                "name": "dataAuth",
                "type": "tuple"
            },
            {
                "internalType": "uint256",
                "name": "timestamp",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_RO_id_hashing",
                "type": "string"
            }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "data_id",
                "type": "string"
            },
            {
                "components": [
                    {
                        "internalType": "string[]",
                        "name": "roles",
                        "type": "string[]"
                    },
                    {
                        "internalType": "string[]",
                        "name": "goals",
                        "type": "string[]"
                    }
                ],
                "internalType": "struct RO_smart_contract.DataAuthFormat",
                "name": "data_auth",
                "type": "tuple"
            }
        ],
        "name": "set_data_auth",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "data_id",
                "type": "string"
            },
            {
                "components": [
                    {
                        "internalType": "string[]",
                        "name": "roles",
                        "type": "string[]"
                    },
                    {
                        "internalType": "string[]",
                        "name": "goals",
                        "type": "string[]"
                    }
                ],
                "internalType": "struct RO_smart_contract.DataAuthFormat",
                "name": "rp_data",
                "type": "tuple"
            }
        ],
        "name": "verify_rp",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            },
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
];

const ro_smartcontract_bytecode = "608060405234801562000010575f80fd5b50604051620023aa380380620023aa833981810160405281019062000036919062000653565b335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000aa575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a19190620006e5565b60405180910390fd5b620000bb81620000d460201b60201c565b50620000cd816200019560201b60201c565b5062000a8a565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f620001a66200034060201b60201c565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff16148015620001ef5750825b90505f60018367ffffffffffffffff161480156200022357505f3073ffffffffffffffffffffffffffffffffffffffff163b145b90508115801562000232575080155b156200026a576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315620002b8576001855f0160086101000a81548160ff0219169083151502179055505b8560019081620002c9919062000937565b50620002db336200036760201b60201c565b831562000338575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516200032f919062000a6f565b60405180910390a15b505050505050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b62000377620003fe60201b60201c565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620003ea575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620003e19190620006e5565b60405180910390fd5b620003fb81620000d460201b60201c565b50565b6200040e620004a060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000434620004a760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200049e5762000460620004a060201b60201c565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401620004959190620006e5565b60405180910390fd5b565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6200052f82620004e7565b810181811067ffffffffffffffff82111715620005515762000550620004f7565b5b80604052505050565b5f62000565620004ce565b905062000573828262000524565b919050565b5f67ffffffffffffffff821115620005955762000594620004f7565b5b620005a082620004e7565b9050602081019050919050565b5f5b83811015620005cc578082015181840152602081019050620005af565b5f8484015250505050565b5f620005ed620005e78462000578565b6200055a565b9050828152602081018484840111156200060c576200060b620004e3565b5b62000619848285620005ad565b509392505050565b5f82601f830112620006385762000637620004df565b5b81516200064a848260208601620005d7565b91505092915050565b5f602082840312156200066b576200066a620004d7565b5b5f82015167ffffffffffffffff8111156200068b576200068a620004db565b5b620006998482850162000621565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620006cd82620006a2565b9050919050565b620006df81620006c1565b82525050565b5f602082019050620006fa5f830184620006d4565b92915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200074f57607f821691505b6020821081036200076557620007646200070a565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620007c97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200078c565b620007d586836200078c565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6200081f620008196200081384620007ed565b620007f6565b620007ed565b9050919050565b5f819050919050565b6200083a83620007ff565b62000852620008498262000826565b84845462000798565b825550505050565b5f90565b620008686200085a565b620008758184846200082f565b505050565b5b818110156200089c57620008905f826200085e565b6001810190506200087b565b5050565b601f821115620008eb57620008b5816200076b565b620008c0846200077d565b81016020851015620008d0578190505b620008e8620008df856200077d565b8301826200087a565b50505b505050565b5f82821c905092915050565b5f6200090d5f1984600802620008f0565b1980831691505092915050565b5f620009278383620008fc565b9150826002028217905092915050565b620009428262000700565b67ffffffffffffffff8111156200095e576200095d620004f7565b5b6200096a825462000737565b62000977828285620008a0565b5f60209050601f831160018114620009ad575f841562000998578287015190505b620009a485826200091a565b86555062000a13565b601f198416620009bd866200076b565b5f5b82811015620009e657848901518255600182019150602085019450602081019050620009bf565b8683101562000a06578489015162000a02601f891682620008fc565b8355505b6001600288020188555050505b505050505050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f62000a5762000a5162000a4b8462000a1b565b620007f6565b62000a24565b9050919050565b62000a698162000a37565b82525050565b5f60208201905062000a845f83018462000a5e565b92915050565b6119128062000a985f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c80638bb749af116100595780638bb749af146101125780638da5cb5b14610130578063f2fde38b1461014e578063f62d18881461016a57610086565b80630c780de81461008a5780633908dd07146100a65780633df216d4146100d7578063715018a614610108575b5f80fd5b6100a4600480360381019061009f919061104b565b610186565b005b6100c060048036038101906100bb91906110c1565b610213565b6040516100ce929190611296565b60405180910390f35b6100f160048036038101906100ec919061104b565b6103fc565b6040516100ff929190611326565b60405180910390f35b61011061086c565b005b61011a61087f565b6040516101279190611354565b60405180910390f35b61013861090b565b60405161014591906113b3565b60405180910390f35b610168600480360381019061016391906113f6565b610932565b005b610184600480360381019061017f91906110c1565b6109b6565b005b61018e610b47565b6040518060400160405280828152602001428152506002836040516101b3919061145b565b90815260200160405180910390205f820151815f015f820151815f0190805190602001906101e2929190610cbd565b5060208201518160010190805190602001906101ff929190610cbd565b505050602082015181600201559050505050565b6002818051602081018201805184825260208301602085012081835280955050505050505f91509050805f016040518060400160405290815f8201805480602002602001604051908101604052809291908181526020015f905b82821015610315578382905f5260205f2001805461028a9061149e565b80601f01602080910402602001604051908101604052809291908181526020018280546102b69061149e565b80156103015780601f106102d857610100808354040283529160200191610301565b820191905f5260205f20905b8154815290600101906020018083116102e457829003601f168201915b50505050508152602001906001019061026d565b50505050815260200160018201805480602002602001604051908101604052809291908181526020015f905b828210156103e9578382905f5260205f2001805461035e9061149e565b80601f016020809104026020016040519081016040528092919081815260200182805461038a9061149e565b80156103d55780601f106103ac576101008083540402835291602001916103d5565b820191905f5260205f20905b8154815290600101906020018083116103b857829003601f168201915b505050505081526020019060010190610341565b5050505081525050908060020154905082565b5f6060610407610b47565b5f600285604051610418919061145b565b90815260200160405180910390206040518060400160405290815f82016040518060400160405290815f8201805480602002602001604051908101604052809291908181526020015f905b8282101561050b578382905f5260205f200180546104809061149e565b80601f01602080910402602001604051908101604052809291908181526020018280546104ac9061149e565b80156104f75780601f106104ce576101008083540402835291602001916104f7565b820191905f5260205f20905b8154815290600101906020018083116104da57829003601f168201915b505050505081526020019060010190610463565b50505050815260200160018201805480602002602001604051908101604052809291908181526020015f905b828210156105df578382905f5260205f200180546105549061149e565b80601f01602080910402602001604051908101604052809291908181526020018280546105809061149e565b80156105cb5780601f106105a2576101008083540402835291602001916105cb565b820191905f5260205f20905b8154815290600101906020018083116105ae57829003601f168201915b505050505081526020019060010190610537565b5050505081525050815260200160028201548152505090505f816020015103610626575f6040518060600160405280603281526020016118ab603291399250925050610865565b5f5b845f015151811015610732575f805b835f01515f0151518110156106f257835f01515f0151818151811061065f5761065e6114ce565b5b6020026020010151604051602001610677919061145b565b60405160208183030381529060405280519060200120875f015184815181106106a3576106a26114ce565b5b60200260200101516040516020016106bb919061145b565b60405160208183030381529060405280519060200120036106df57600191506106f2565b80806106ea90611528565b915050610637565b508061071e575f6040518060600160405280602281526020016118896022913994509450505050610865565b50808061072a90611528565b915050610628565b505f5b846020015151811015610843575f805b835f0151602001515181101561080357835f015160200151818151811061076f5761076e6114ce565b5b6020026020010151604051602001610787919061145b565b60405160208183030381529060405280519060200120876020015184815181106107b4576107b36114ce565b5b60200260200101516040516020016107cc919061145b565b60405160208183030381529060405280519060200120036107f05760019150610803565b80806107fb90611528565b915050610745565b508061082f575f6040518060600160405280602281526020016118416022913994509450505050610865565b50808061083b90611528565b915050610735565b5060016040518060600160405280602681526020016118636026913992509250505b9250929050565b610874610b47565b61087d5f610bce565b565b6001805461088c9061149e565b80601f01602080910402602001604051908101604052809291908181526020018280546108b89061149e565b80156109035780601f106108da57610100808354040283529160200191610903565b820191905f5260205f20905b8154815290600101906020018083116108e657829003601f168201915b505050505081565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61093a610b47565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109aa575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109a191906113b3565b60405180910390fd5b6109b381610bce565b50565b5f6109bf610c8f565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff16148015610a075750825b90505f60018367ffffffffffffffff16148015610a3a57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610a48575080155b15610a7f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610acc576001855f0160086101000a81548160ff0219169083151502179055505b8560019081610adb919061170c565b50610ae533610932565b8315610b3f575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610b369190611827565b60405180910390a15b505050505050565b610b4f610cb6565b73ffffffffffffffffffffffffffffffffffffffff16610b6d61090b565b73ffffffffffffffffffffffffffffffffffffffff1614610bcc57610b90610cb6565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610bc391906113b3565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f33905090565b828054828255905f5260205f20908101928215610d03579160200282015b82811115610d02578251829081610cf2919061170c565b5091602001919060010190610cdb565b5b509050610d109190610d14565b5090565b5b80821115610d33575f8181610d2a9190610d37565b50600101610d15565b5090565b508054610d439061149e565b5f825580601f10610d545750610d71565b601f0160209004905f5260205f2090810190610d709190610d74565b5b50565b5b80821115610d8b575f815f905550600101610d75565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610dee82610da8565b810181811067ffffffffffffffff82111715610e0d57610e0c610db8565b5b80604052505050565b5f610e1f610d8f565b9050610e2b8282610de5565b919050565b5f67ffffffffffffffff821115610e4a57610e49610db8565b5b610e5382610da8565b9050602081019050919050565b828183375f83830152505050565b5f610e80610e7b84610e30565b610e16565b905082815260208101848484011115610e9c57610e9b610da4565b5b610ea7848285610e60565b509392505050565b5f82601f830112610ec357610ec2610da0565b5b8135610ed3848260208601610e6e565b91505092915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff821115610efe57610efd610db8565b5b602082029050602081019050919050565b5f80fd5b5f610f25610f2084610ee4565b610e16565b90508083825260208201905060208402830185811115610f4857610f47610f0f565b5b835b81811015610f8f57803567ffffffffffffffff811115610f6d57610f6c610da0565b5b808601610f7a8982610eaf565b85526020850194505050602081019050610f4a565b5050509392505050565b5f82601f830112610fad57610fac610da0565b5b8135610fbd848260208601610f13565b91505092915050565b5f60408284031215610fdb57610fda610edc565b5b610fe56040610e16565b90505f82013567ffffffffffffffff81111561100457611003610ee0565b5b61101084828501610f99565b5f83015250602082013567ffffffffffffffff81111561103357611032610ee0565b5b61103f84828501610f99565b60208301525092915050565b5f806040838503121561106157611060610d98565b5b5f83013567ffffffffffffffff81111561107e5761107d610d9c565b5b61108a85828601610eaf565b925050602083013567ffffffffffffffff8111156110ab576110aa610d9c565b5b6110b785828601610fc6565b9150509250929050565b5f602082840312156110d6576110d5610d98565b5b5f82013567ffffffffffffffff8111156110f3576110f2610d9c565b5b6110ff84828501610eaf565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561116857808201518184015260208101905061114d565b5f8484015250505050565b5f61117d82611131565b611187818561113b565b935061119781856020860161114b565b6111a081610da8565b840191505092915050565b5f6111b68383611173565b905092915050565b5f602082019050919050565b5f6111d482611108565b6111de8185611112565b9350836020820285016111f085611122565b805f5b8581101561122b578484038952815161120c85826111ab565b9450611217836111be565b925060208a019950506001810190506111f3565b50829750879550505050505092915050565b5f604083015f8301518482035f86015261125782826111ca565b9150506020830151848203602086015261127182826111ca565b9150508091505092915050565b5f819050919050565b6112908161127e565b82525050565b5f6040820190508181035f8301526112ae818561123d565b90506112bd6020830184611287565b9392505050565b5f8115159050919050565b6112d8816112c4565b82525050565b5f82825260208201905092915050565b5f6112f882611131565b61130281856112de565b935061131281856020860161114b565b61131b81610da8565b840191505092915050565b5f6040820190506113395f8301856112cf565b818103602083015261134b81846112ee565b90509392505050565b5f6020820190508181035f83015261136c81846112ee565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61139d82611374565b9050919050565b6113ad81611393565b82525050565b5f6020820190506113c65f8301846113a4565b92915050565b6113d581611393565b81146113df575f80fd5b50565b5f813590506113f0816113cc565b92915050565b5f6020828403121561140b5761140a610d98565b5b5f611418848285016113e2565b91505092915050565b5f81905092915050565b5f61143582611131565b61143f8185611421565b935061144f81856020860161114b565b80840191505092915050565b5f611466828461142b565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806114b557607f821691505b6020821081036114c8576114c7611471565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6115328261127e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611564576115636114fb565b5b600182019050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026115cb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611590565b6115d58683611590565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61161061160b6116068461127e565b6115ed565b61127e565b9050919050565b5f819050919050565b611629836115f6565b61163d61163582611617565b84845461159c565b825550505050565b5f90565b611651611645565b61165c818484611620565b505050565b5b8181101561167f576116745f82611649565b600181019050611662565b5050565b601f8211156116c4576116958161156f565b61169e84611581565b810160208510156116ad578190505b6116c16116b985611581565b830182611661565b50505b505050565b5f82821c905092915050565b5f6116e45f19846008026116c9565b1980831691505092915050565b5f6116fc83836116d5565b9150826002028217905092915050565b61171582611131565b67ffffffffffffffff81111561172e5761172d610db8565b5b611738825461149e565b611743828285611683565b5f60209050601f831160018114611774575f8415611762578287015190505b61176c85826116f1565b8655506117d3565b601f1984166117828661156f565b5f5b828110156117a957848901518255600182019150602085019450602081019050611784565b868310156117c657848901516117c2601f8916826116d5565b8355505b6001600288020188555050505b505050505050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f61181161180c611807846117db565b6115ed565b6117e4565b9050919050565b611821816117f7565b82525050565b5f60208201905061183a5f830184611818565b9291505056fe5b50415353204661696c65645d20525020676f616c732061726520696e76616c69645b504153535d2052502069732076616c696420696e2074686520766572696669636174696f6e5b50415353204661696c65645d20525020726f6c65732061726520696e76616c69645b50415353204661696c65645d204e6f206461746120656e74727920666f756e6420666f72207468697320646174615f6964a26469706673582212200f916f1a422ea6383b515ee058b719c351d406766cc106122788a592c385b4d964736f6c63430008140033";

const deploy_ro_smartcontract = async (RO_id_hashing : string) => {

    try{
        const public_wallet = await get_public_wallet();

        // deploy
        const contract = new web3.eth.Contract(ro_smartcontract_abi as any);
        const contract_instance = await contract.deploy({
            data: ro_smartcontract_bytecode,
            arguments: [RO_id_hashing]
        })
        .send({
            from: public_wallet,
            gas: 3000000,
            gasPrice: '900000000'
        });

        console.log(`[deploy_smart_contract] roid_smartcontract deploy for "${RO_id_hashing}" at "${contract_instance.options.address}" [OK]`);
    
        // add to roid_address
        const contarct_address = contract_instance.options.address;
        (await roid_address_smart_contract_instance).methods.setSmartContract(RO_id_hashing, contarct_address).send({ from: public_wallet });

        console.log(`[smart contract method] roid_smartcontract use setSamrtContract mapping : ${RO_id_hashing} => ${contarct_address} [OK]`);

        return contarct_address;

    }catch(err){
        console.error(`[deploy smart contract] deploy_ro_smartcontract error : ${err}`);
    }
}

const get_ro_contract_address = async (ro_id_hashing : string) => {
    let ro_contract_address = await (await roid_address_smart_contract_instance).methods.getSmartContract(ro_id_hashing).call();

    if(ro_contract_address == "0x0000000000000000000000000000000000000000"){
        ro_contract_address = await deploy_ro_smartcontract(ro_id_hashing);
    }

    return ro_contract_address;
}

const get_ro_smart_contract_instance = async ( contract_address : string ) => {
    const ro_smartcontract_smart_contract_instance = new web3.eth.Contract(ro_smartcontract_abi as any, contract_address);
    return ro_smartcontract_smart_contract_instance;
}