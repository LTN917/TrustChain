/*
    run the file to create the first roid_address smart contract
    npx ts-node -P tsconfig.server.json ./blockchain/ethereum_env.ts
*/ 

import Web3 from 'web3';
import { send_sign_tx } from '../vautlBX/methods';

export { web3, roid_address_smart_contract_instance, deploy_ro_smartcontract, get_ro_contract_address, get_ro_smart_contract_instance, deploy_roid_address, get_public_wallet };


// creating Web3 instance to localhost Hardhat
const web3 = new Web3('http://localhost:8545');

//ganache first wallet address
const get_public_wallet = async () => {
    const accounts = await web3.eth.getAccounts();
    return accounts[0];
}

// ================================ smart contract - roid_address =============================================
const roid_address_abi = [
    {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            }
        ],
        "name": "OwnableInvalidOwner",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "account",
                "type": "address"
            }
        ],
        "name": "OwnableUnauthorizedAccount",
        "type": "error"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
            },
            {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            }
        ],
        "name": "getSmartContract",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            }
        ],
        "name": "getVaultBX",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hash",
                "type": "string"
            },
            {
                "internalType": "address",
                "name": "smartContract_address",
                "type": "address"
            }
        ],
        "name": "setSmartContract",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            },
            {
                "internalType": "address",
                "name": "vaultBX_address",
                "type": "address"
            }
        ],
        "name": "setVaultBX",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            },
            {
                "internalType": "address",
                "name": "vaultBX_address",
                "type": "address"
            }
        ],
        "name": "verifyVaultBX",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
];

const roid_address_bytecode ="608060405234801561000f575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610081575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100789190610196565b60405180910390fd5b6100908161009660201b60201c565b506101af565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61018082610157565b9050919050565b61019081610176565b82525050565b5f6020820190506101a95f830184610187565b92915050565b61090a806101bc5f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c80638da5cb5b116100595780638da5cb5b14610110578063c58992201461012e578063c6c4fbc61461015e578063f2fde38b1461017a57610086565b806340763c3e1461008a5780634986b388146100ba578063648451a8146100ea578063715018a614610106575b5f80fd5b6100a4600480360381019061009f91906106d1565b610196565b6040516100b19190610757565b60405180910390f35b6100d460048036038101906100cf919061079a565b6101e4565b6040516100e1919061080e565b60405180910390f35b61010460048036038101906100ff919061079a565b610259565b005b61010e6102c1565b005b6101186102d4565b6040516101259190610757565b60405180910390f35b610148600480360381019061014391906106d1565b6102fb565b6040516101559190610757565b60405180910390f35b6101786004803603810190610173919061079a565b610349565b005b610194600480360381019061018f9190610827565b6103b1565b005b5f61019f610435565b6002826040516101af91906108be565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff1660018460405161020c91906108be565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b610261610435565b8060018360405161027291906108be565b90815260200160405180910390205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6102c9610435565b6102d25f6104bc565b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f610304610435565b60018260405161031491906108be565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610351610435565b8060028360405161036291906108be565b90815260200160405180910390205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6103b9610435565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610429575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016104209190610757565b60405180910390fd5b610432816104bc565b50565b61043d61057d565b73ffffffffffffffffffffffffffffffffffffffff1661045b6102d4565b73ffffffffffffffffffffffffffffffffffffffff16146104ba5761047e61057d565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016104b19190610757565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6105e38261059d565b810181811067ffffffffffffffff82111715610602576106016105ad565b5b80604052505050565b5f610614610584565b905061062082826105da565b919050565b5f67ffffffffffffffff82111561063f5761063e6105ad565b5b6106488261059d565b9050602081019050919050565b828183375f83830152505050565b5f61067561067084610625565b61060b565b90508281526020810184848401111561069157610690610599565b5b61069c848285610655565b509392505050565b5f82601f8301126106b8576106b7610595565b5b81356106c8848260208601610663565b91505092915050565b5f602082840312156106e6576106e561058d565b5b5f82013567ffffffffffffffff81111561070357610702610591565b5b61070f848285016106a4565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61074182610718565b9050919050565b61075181610737565b82525050565b5f60208201905061076a5f830184610748565b92915050565b61077981610737565b8114610783575f80fd5b50565b5f8135905061079481610770565b92915050565b5f80604083850312156107b0576107af61058d565b5b5f83013567ffffffffffffffff8111156107cd576107cc610591565b5b6107d9858286016106a4565b92505060206107ea85828601610786565b9150509250929050565b5f8115159050919050565b610808816107f4565b82525050565b5f6020820190506108215f8301846107ff565b92915050565b5f6020828403121561083c5761083b61058d565b5b5f61084984828501610786565b91505092915050565b5f81519050919050565b5f81905092915050565b5f5b83811015610883578082015181840152602081019050610868565b5f8484015250505050565b5f61089882610852565b6108a2818561085c565b93506108b2818560208601610866565b80840191505092915050565b5f6108c9828461088e565b91508190509291505056fea2646970667358221220aedddb1175f815b90819e83fe15fb13493ef6ee066e13165c5089c0cb312ae6764736f6c63430008140033";

let roid_address_smart_contract_instance : any;

const deploy_roid_address = async (platform_name : string) => {

    try{
        const public_wallet = await get_public_wallet();

        const contract = new web3.eth.Contract(roid_address_abi as any);
        const contract_instance = await contract.deploy({
            data: roid_address_bytecode,
            arguments: []
        })
        .send({
            from: public_wallet,
            gas: 5000000,      // 增加 gas 限制
            gasPrice: '900000000'    
        });

        roid_address_smart_contract_instance = new web3.eth.Contract(roid_address_abi as any, contract_instance.options.address);

        console.log(`[deploy smart contract] roid_address deploy for '${platform_name}' at : ${contract_instance.options.address} [OK]`);

        return contract_instance.options.address;
    }catch(err){
        console.log(`[deploy smart contract] roid_address error : ${err}`);
    }
}

// ================================ smart contract - ro_smartcontract  =================================================
const ro_smartcontract_abi = [
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_RO_id_hashing",
                "type": "string"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "InvalidInitialization",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "NotInitializing",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            }
        ],
        "name": "OwnableInvalidOwner",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "account",
                "type": "address"
            }
        ],
        "name": "OwnableUnauthorizedAccount",
        "type": "error"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "uint64",
                "name": "version",
                "type": "uint64"
            }
        ],
        "name": "Initialized",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
            },
            {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
    },
    {
        "inputs": [],
        "name": "RO_id_hashing",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "name": "dataAuthMap",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "timestamp",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_RO_id_hashing",
                "type": "string"
            }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "data_id",
                "type": "string"
            },
            {
                "internalType": "string[]",
                "name": "_roles",
                "type": "string[]"
            },
            {
                "internalType": "string[]",
                "name": "_goals",
                "type": "string[]"
            }
        ],
        "name": "set_data_auth",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "data_id",
                "type": "string"
            },
            {
                "internalType": "string[]",
                "name": "_roles",
                "type": "string[]"
            },
            {
                "internalType": "string[]",
                "name": "_goals",
                "type": "string[]"
            }
        ],
        "name": "verify_rp",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            },
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
];

const ro_smartcontract_bytecode = "608060405234801562000010575f80fd5b5060405162001ee938038062001ee9833981810160405281019062000036919062000653565b335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000aa575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a19190620006e5565b60405180910390fd5b620000bb81620000d460201b60201c565b50620000cd816200019560201b60201c565b5062000a8a565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f620001a66200034060201b60201c565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff16148015620001ef5750825b90505f60018367ffffffffffffffff161480156200022357505f3073ffffffffffffffffffffffffffffffffffffffff163b145b90508115801562000232575080155b156200026a576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315620002b8576001855f0160086101000a81548160ff0219169083151502179055505b8560019081620002c9919062000937565b50620002db336200036760201b60201c565b831562000338575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516200032f919062000a6f565b60405180910390a15b505050505050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b62000377620003fe60201b60201c565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620003ea575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620003e19190620006e5565b60405180910390fd5b620003fb81620000d460201b60201c565b50565b6200040e620004a060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000434620004a760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200049e5762000460620004a060201b60201c565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401620004959190620006e5565b60405180910390fd5b565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6200052f82620004e7565b810181811067ffffffffffffffff82111715620005515762000550620004f7565b5b80604052505050565b5f62000565620004ce565b905062000573828262000524565b919050565b5f67ffffffffffffffff821115620005955762000594620004f7565b5b620005a082620004e7565b9050602081019050919050565b5f5b83811015620005cc578082015181840152602081019050620005af565b5f8484015250505050565b5f620005ed620005e78462000578565b6200055a565b9050828152602081018484840111156200060c576200060b620004e3565b5b62000619848285620005ad565b509392505050565b5f82601f830112620006385762000637620004df565b5b81516200064a848260208601620005d7565b91505092915050565b5f602082840312156200066b576200066a620004d7565b5b5f82015167ffffffffffffffff8111156200068b576200068a620004db565b5b620006998482850162000621565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620006cd82620006a2565b9050919050565b620006df81620006c1565b82525050565b5f602082019050620006fa5f830184620006d4565b92915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200074f57607f821691505b6020821081036200076557620007646200070a565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620007c97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200078c565b620007d586836200078c565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6200081f620008196200081384620007ed565b620007f6565b620007ed565b9050919050565b5f819050919050565b6200083a83620007ff565b62000852620008498262000826565b84845462000798565b825550505050565b5f90565b620008686200085a565b620008758184846200082f565b505050565b5b818110156200089c57620008905f826200085e565b6001810190506200087b565b5050565b601f821115620008eb57620008b5816200076b565b620008c0846200077d565b81016020851015620008d0578190505b620008e8620008df856200077d565b8301826200087a565b50505b505050565b5f82821c905092915050565b5f6200090d5f1984600802620008f0565b1980831691505092915050565b5f620009278383620008fc565b9150826002028217905092915050565b620009428262000700565b67ffffffffffffffff8111156200095e576200095d620004f7565b5b6200096a825462000737565b62000977828285620008a0565b5f60209050601f831160018114620009ad575f841562000998578287015190505b620009a485826200091a565b86555062000a13565b601f198416620009bd866200076b565b5f5b82811015620009e657848901518255600182019150602085019450602081019050620009bf565b8683101562000a06578489015162000a02601f891682620008fc565b8355505b6001600288020188555050505b505050505050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f62000a5762000a5162000a4b8462000a1b565b620007f6565b62000a24565b9050919050565b62000a698162000a37565b82525050565b5f60208201905062000a845f83018462000a5e565b92915050565b6114518062000a985f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c80638bb749af116100595780638bb749af146101115780638da5cb5b1461012f578063f2fde38b1461014d578063f62d18881461016957610086565b80631245beaa1461008a5780633908dd07146100a65780633d9c6957146100d6578063715018a614610107575b5f80fd5b6100a4600480360381019061009f9190610c1f565b610185565b005b6100c060048036038101906100bb9190610cc3565b610210565b6040516100cd9190610d22565b60405180910390f35b6100f060048036038101906100eb9190610c1f565b610243565b6040516100fe929190610dcf565b60405180910390f35b61010f6104cd565b005b6101196104e0565b6040516101269190610dfd565b60405180910390f35b61013761056c565b6040516101449190610e5c565b60405180910390f35b61016760048036038101906101629190610e9f565b610593565b005b610183600480360381019061017e9190610cc3565b610617565b005b61018d6107a8565b6040518060600160405280838152602001828152602001428152506002846040516101b89190610f04565b90815260200160405180910390205f820151815f0190805190602001906101e092919061091e565b5060208201518160010190805190602001906101fd92919061091e565b5060408201518160020155905050505050565b6002818051602081018201805184825260208301602085012081835280955050505050505f915090508060020154905081565b5f606061024e6107a8565b5f60028660405161025f9190610f04565b908152602001604051809103902090505f81600201540361029e575f6040518060600160405280603281526020016113ea6032913992509250506104c5565b5f5b855181101561039f575f805b835f018054905081101561035f57835f0181815481106102cf576102ce610f1a565b5b905f5260205f20016040516020016102e79190611036565b604051602081830303815290604052805190602001208884815181106103105761030f610f1a565b5b60200260200101516040516020016103289190610f04565b604051602081830303815290604052805190602001200361034c576001915061035f565b808061035790611079565b9150506102ac565b508061038b575f6040518060600160405280602281526020016113c860229139945094505050506104c5565b50808061039790611079565b9150506102a0565b505f5b84518110156104a3575f805b8360010180549050811015610463578360010181815481106103d3576103d2610f1a565b5b905f5260205f20016040516020016103eb9190611036565b6040516020818303038152906040528051906020012087848151811061041457610413610f1a565b5b602002602001015160405160200161042c9190610f04565b60405160208183030381529060405280519060200120036104505760019150610463565b808061045b90611079565b9150506103ae565b508061048f575f60405180606001604052806022815260200161138060229139945094505050506104c5565b50808061049b90611079565b9150506103a2565b5060016040518060600160405280602681526020016113a26026913992509250505b935093915050565b6104d56107a8565b6104de5f61082f565b565b600180546104ed90610f74565b80601f016020809104026020016040519081016040528092919081815260200182805461051990610f74565b80156105645780601f1061053b57610100808354040283529160200191610564565b820191905f5260205f20905b81548152906001019060200180831161054757829003601f168201915b505050505081565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61059b6107a8565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361060b575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016106029190610e5c565b60405180910390fd5b6106148161082f565b50565b5f6106206108f0565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff161480156106685750825b90505f60018367ffffffffffffffff1614801561069b57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156106a9575080155b156106e0576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561072d576001855f0160086101000a81548160ff0219169083151502179055505b856001908161073c919061124b565b5061074633610593565b83156107a0575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516107979190611366565b60405180910390a15b505050505050565b6107b0610917565b73ffffffffffffffffffffffffffffffffffffffff166107ce61056c565b73ffffffffffffffffffffffffffffffffffffffff161461082d576107f1610917565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108249190610e5c565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f33905090565b828054828255905f5260205f20908101928215610964579160200282015b82811115610963578251829081610953919061124b565b509160200191906001019061093c565b5b5090506109719190610975565b5090565b5b80821115610994575f818161098b9190610998565b50600101610976565b5090565b5080546109a490610f74565b5f825580601f106109b557506109d2565b601f0160209004905f5260205f20908101906109d191906109d5565b5b50565b5b808211156109ec575f815f9055506001016109d6565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610a4f82610a09565b810181811067ffffffffffffffff82111715610a6e57610a6d610a19565b5b80604052505050565b5f610a806109f0565b9050610a8c8282610a46565b919050565b5f67ffffffffffffffff821115610aab57610aaa610a19565b5b610ab482610a09565b9050602081019050919050565b828183375f83830152505050565b5f610ae1610adc84610a91565b610a77565b905082815260208101848484011115610afd57610afc610a05565b5b610b08848285610ac1565b509392505050565b5f82601f830112610b2457610b23610a01565b5b8135610b34848260208601610acf565b91505092915050565b5f67ffffffffffffffff821115610b5757610b56610a19565b5b602082029050602081019050919050565b5f80fd5b5f610b7e610b7984610b3d565b610a77565b90508083825260208201905060208402830185811115610ba157610ba0610b68565b5b835b81811015610be857803567ffffffffffffffff811115610bc657610bc5610a01565b5b808601610bd38982610b10565b85526020850194505050602081019050610ba3565b5050509392505050565b5f82601f830112610c0657610c05610a01565b5b8135610c16848260208601610b6c565b91505092915050565b5f805f60608486031215610c3657610c356109f9565b5b5f84013567ffffffffffffffff811115610c5357610c526109fd565b5b610c5f86828701610b10565b935050602084013567ffffffffffffffff811115610c8057610c7f6109fd565b5b610c8c86828701610bf2565b925050604084013567ffffffffffffffff811115610cad57610cac6109fd565b5b610cb986828701610bf2565b9150509250925092565b5f60208284031215610cd857610cd76109f9565b5b5f82013567ffffffffffffffff811115610cf557610cf46109fd565b5b610d0184828501610b10565b91505092915050565b5f819050919050565b610d1c81610d0a565b82525050565b5f602082019050610d355f830184610d13565b92915050565b5f8115159050919050565b610d4f81610d3b565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610d8c578082015181840152602081019050610d71565b5f8484015250505050565b5f610da182610d55565b610dab8185610d5f565b9350610dbb818560208601610d6f565b610dc481610a09565b840191505092915050565b5f604082019050610de25f830185610d46565b8181036020830152610df48184610d97565b90509392505050565b5f6020820190508181035f830152610e158184610d97565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e4682610e1d565b9050919050565b610e5681610e3c565b82525050565b5f602082019050610e6f5f830184610e4d565b92915050565b610e7e81610e3c565b8114610e88575f80fd5b50565b5f81359050610e9981610e75565b92915050565b5f60208284031215610eb457610eb36109f9565b5b5f610ec184828501610e8b565b91505092915050565b5f81905092915050565b5f610ede82610d55565b610ee88185610eca565b9350610ef8818560208601610d6f565b80840191505092915050565b5f610f0f8284610ed4565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610f8b57607f821691505b602082108103610f9e57610f9d610f47565b5b50919050565b5f819050815f5260205f209050919050565b5f8154610fc281610f74565b610fcc8186610eca565b9450600182165f8114610fe65760018114610ffb5761102d565b60ff198316865281151582028601935061102d565b61100485610fa4565b5f5b8381101561102557815481890152600182019150602081019050611006565b838801955050505b50505092915050565b5f6110418284610fb6565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61108382610d0a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110b5576110b461104c565b5b600182019050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261110a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826110cf565b61111486836110cf565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61114f61114a61114584610d0a565b61112c565b610d0a565b9050919050565b5f819050919050565b61116883611135565b61117c61117482611156565b8484546110db565b825550505050565b5f90565b611190611184565b61119b81848461115f565b505050565b5b818110156111be576111b35f82611188565b6001810190506111a1565b5050565b601f821115611203576111d481610fa4565b6111dd846110c0565b810160208510156111ec578190505b6112006111f8856110c0565b8301826111a0565b50505b505050565b5f82821c905092915050565b5f6112235f1984600802611208565b1980831691505092915050565b5f61123b8383611214565b9150826002028217905092915050565b61125482610d55565b67ffffffffffffffff81111561126d5761126c610a19565b5b6112778254610f74565b6112828282856111c2565b5f60209050601f8311600181146112b3575f84156112a1578287015190505b6112ab8582611230565b865550611312565b601f1984166112c186610fa4565b5f5b828110156112e8578489015182556001820191506020850194506020810190506112c3565b868310156113055784890151611301601f891682611214565b8355505b6001600288020188555050505b505050505050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f61135061134b6113468461131a565b61112c565b611323565b9050919050565b61136081611336565b82525050565b5f6020820190506113795f830184611357565b9291505056fe5b50415353204661696c65645d20525020676f616c732061726520696e76616c69645b504153535d2052502069732076616c696420696e2074686520766572696669636174696f6e5b50415353204661696c65645d20525020726f6c65732061726520696e76616c69645b50415353204661696c65645d204e6f206461746120656e74727920666f756e6420666f72207468697320646174615f6964a2646970667358221220b1903a33ea86723a63d9b100c3f096d854aa554361561d3e519f9fcef6faaa5664736f6c63430008140033";

const deploy_ro_smartcontract = async (RO_id_hashing : string) => {

    try{
        const public_wallet = await get_public_wallet();
        let ro_vaultBX_address = await (await roid_address_smart_contract_instance).methods.getVaultBX(RO_id_hashing).call();

        // get sign_tx of deploy smart contract by vaultBX wallet
        const contract = new web3.eth.Contract(ro_smartcontract_abi as any);
        const data = await contract.deploy({ data: ro_smartcontract_bytecode, arguments: [RO_id_hashing] }).encodeABI();
        const tx = {
            address_from: ro_vaultBX_address,
            address_to: null,  // 因為是部署合約，所以沒有接收地址
            chainID : "1337", 
            amount : "0",  
            gas_price : await web3.eth.getGasPrice(),  
            gas_limit : 10000000,  
            nonce : await web3.eth.getTransactionCount(ro_vaultBX_address, 'latest'),  
            data : data,  
            is_private : false 
        }

        let sign_tx = await send_sign_tx(RO_id_hashing, tx);
        let signed_transaction = sign_tx?.data.data.signed_transaction;
        console.log('[deploy_smart_contract] get signed_transaction to deploy the contract: ', signed_transaction);

        // send the sign_tx and deploy smart contract 
        const receipt = await web3.eth.sendSignedTransaction(signed_transaction as any);
        const contarct_address = receipt.contractAddress;
        console.log(`[deploy_smart_contract] roid_smartcontract deploy for "${RO_id_hashing}" at "${contarct_address}" [OK]`);
    
        // add to roid_address
        await (await roid_address_smart_contract_instance).methods.setSmartContract(RO_id_hashing, contarct_address).send({ from: public_wallet });

        console.log(`[smart contract method] roid_smartcontract use setSamrtContract mapping : ${RO_id_hashing} => ${contarct_address} [OK]`);

        return contarct_address;

    }catch(err){
        console.error(`[deploy smart contract] deploy_ro_smartcontract error : ${err}`);
    }
}

const get_ro_contract_address = async (ro_id_hashing : string) => {
    let ro_contract_address = await (await roid_address_smart_contract_instance).methods.getSmartContract(ro_id_hashing).call();

    if(ro_contract_address == "0x0000000000000000000000000000000000000000"){
        ro_contract_address = await deploy_ro_smartcontract(ro_id_hashing);
    }

    return ro_contract_address;
}

const get_ro_smart_contract_instance = async ( contract_address : string ) => {
    const ro_smartcontract_smart_contract_instance = new web3.eth.Contract(ro_smartcontract_abi as any, contract_address);
    return ro_smartcontract_smart_contract_instance;
}