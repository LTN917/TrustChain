/*
    run the file to create the first roid_address smart contract
    npx ts-node -P tsconfig.server.json ./blockchain/ethereum_env.ts
*/ 

import Web3 from 'web3';
import { send_sign_tx } from '../vautlBX/methods';
import { promises as fs } from 'fs';
import path from 'path';

export { web3, roid_address_smart_contract_instance, deploy_ro_smartcontract, get_ro_contract_address, get_ro_smart_contract_instance, deploy_roid_address, get_public_wallet, get_roid_address };


// creating Web3 instance to localhost Hardhat
const web3 = new Web3('http://localhost:8545');

//ganache first wallet address
const get_public_wallet = async () => {
    const accounts = await web3.eth.getAccounts();
    return accounts[0];
}

// ================================ smart contract - roid_address =============================================
const roid_address_abi = [
    {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            }
        ],
        "name": "OwnableInvalidOwner",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "account",
                "type": "address"
            }
        ],
        "name": "OwnableUnauthorizedAccount",
        "type": "error"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
            },
            {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "dataid_hash",
                "type": "string"
            }
        ],
        "name": "getRoid",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            }
        ],
        "name": "getSmartContract",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            }
        ],
        "name": "getVaultBX",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "dataid_hash",
                "type": "string"
            },
            {
                "internalType": "string",
                "name": "roid_hash",
                "type": "string"
            }
        ],
        "name": "setDataidRoid",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hash",
                "type": "string"
            },
            {
                "internalType": "address",
                "name": "smartContract_address",
                "type": "address"
            }
        ],
        "name": "setSmartContract",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            },
            {
                "internalType": "address",
                "name": "vaultBX_address",
                "type": "address"
            }
        ],
        "name": "setVaultBX",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "roid_hashing",
                "type": "string"
            },
            {
                "internalType": "address",
                "name": "vaultBX_address",
                "type": "address"
            }
        ],
        "name": "verifyVaultBX",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
];

const roid_address_bytecode ="608060405234801561000f575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610081575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100789190610196565b60405180910390fd5b6100908161009660201b60201c565b506101af565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61018082610157565b9050919050565b61019081610176565b82525050565b5f6020820190506101a95f830184610187565b92915050565b610e0a806101bc5f395ff3fe608060405234801561000f575f80fd5b506004361061009c575f3560e01c80638da5cb5b116100645780638da5cb5b14610142578063971cab6f14610160578063c589922014610190578063c6c4fbc6146101c0578063f2fde38b146101dc5761009c565b80633084f152146100a057806340763c3e146100bc5780634986b388146100ec578063648451a81461011c578063715018a614610138575b5f80fd5b6100ba60048036038101906100b59190610821565b6101f8565b005b6100d660048036038101906100d19190610897565b610230565b6040516100e3919061091d565b60405180910390f35b61010660048036038101906101019190610960565b61027e565b60405161011391906109d4565b60405180910390f35b61013660048036038101906101319190610960565b6102f3565b005b61014061035b565b005b61014a61036e565b604051610157919061091d565b60405180910390f35b61017a60048036038101906101759190610897565b610395565b6040516101879190610a67565b60405180910390f35b6101aa60048036038101906101a59190610897565b61044b565b6040516101b7919061091d565b60405180910390f35b6101da60048036038101906101d59190610960565b610499565b005b6101f660048036038101906101f19190610a87565b610501565b005b610200610585565b806003836040516102119190610aec565b9081526020016040518091039020908161022b9190610d05565b505050565b5f610239610585565b6002826040516102499190610aec565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff166001846040516102a69190610aec565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b6102fb610585565b8060018360405161030c9190610aec565b90815260200160405180910390205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610363610585565b61036c5f61060c565b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606061039f610585565b6003826040516103af9190610aec565b908152602001604051809103902080546103c890610b2f565b80601f01602080910402602001604051908101604052809291908181526020018280546103f490610b2f565b801561043f5780601f106104165761010080835404028352916020019161043f565b820191905f5260205f20905b81548152906001019060200180831161042257829003601f168201915b50505050509050919050565b5f610454610585565b6001826040516104649190610aec565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6104a1610585565b806002836040516104b29190610aec565b90815260200160405180910390205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610509610585565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610579575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610570919061091d565b60405180910390fd5b6105828161060c565b50565b61058d6106cd565b73ffffffffffffffffffffffffffffffffffffffff166105ab61036e565b73ffffffffffffffffffffffffffffffffffffffff161461060a576105ce6106cd565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610601919061091d565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610733826106ed565b810181811067ffffffffffffffff82111715610752576107516106fd565b5b80604052505050565b5f6107646106d4565b9050610770828261072a565b919050565b5f67ffffffffffffffff82111561078f5761078e6106fd565b5b610798826106ed565b9050602081019050919050565b828183375f83830152505050565b5f6107c56107c084610775565b61075b565b9050828152602081018484840111156107e1576107e06106e9565b5b6107ec8482856107a5565b509392505050565b5f82601f830112610808576108076106e5565b5b81356108188482602086016107b3565b91505092915050565b5f8060408385031215610837576108366106dd565b5b5f83013567ffffffffffffffff811115610854576108536106e1565b5b610860858286016107f4565b925050602083013567ffffffffffffffff811115610881576108806106e1565b5b61088d858286016107f4565b9150509250929050565b5f602082840312156108ac576108ab6106dd565b5b5f82013567ffffffffffffffff8111156108c9576108c86106e1565b5b6108d5848285016107f4565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610907826108de565b9050919050565b610917816108fd565b82525050565b5f6020820190506109305f83018461090e565b92915050565b61093f816108fd565b8114610949575f80fd5b50565b5f8135905061095a81610936565b92915050565b5f8060408385031215610976576109756106dd565b5b5f83013567ffffffffffffffff811115610993576109926106e1565b5b61099f858286016107f4565b92505060206109b08582860161094c565b9150509250929050565b5f8115159050919050565b6109ce816109ba565b82525050565b5f6020820190506109e75f8301846109c5565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610a24578082015181840152602081019050610a09565b5f8484015250505050565b5f610a39826109ed565b610a4381856109f7565b9350610a53818560208601610a07565b610a5c816106ed565b840191505092915050565b5f6020820190508181035f830152610a7f8184610a2f565b905092915050565b5f60208284031215610a9c57610a9b6106dd565b5b5f610aa98482850161094c565b91505092915050565b5f81905092915050565b5f610ac6826109ed565b610ad08185610ab2565b9350610ae0818560208601610a07565b80840191505092915050565b5f610af78284610abc565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610b4657607f821691505b602082108103610b5957610b58610b02565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610bbb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610b80565b610bc58683610b80565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f610c09610c04610bff84610bdd565b610be6565b610bdd565b9050919050565b5f819050919050565b610c2283610bef565b610c36610c2e82610c10565b848454610b8c565b825550505050565b5f90565b610c4a610c3e565b610c55818484610c19565b505050565b5b81811015610c7857610c6d5f82610c42565b600181019050610c5b565b5050565b601f821115610cbd57610c8e81610b5f565b610c9784610b71565b81016020851015610ca6578190505b610cba610cb285610b71565b830182610c5a565b50505b505050565b5f82821c905092915050565b5f610cdd5f1984600802610cc2565b1980831691505092915050565b5f610cf58383610cce565b9150826002028217905092915050565b610d0e826109ed565b67ffffffffffffffff811115610d2757610d266106fd565b5b610d318254610b2f565b610d3c828285610c7c565b5f60209050601f831160018114610d6d575f8415610d5b578287015190505b610d658582610cea565b865550610dcc565b601f198416610d7b86610b5f565b5f5b82811015610da257848901518255600182019150602085019450602081019050610d7d565b86831015610dbf5784890151610dbb601f891682610cce565b8355505b6001600288020188555050505b50505050505056fea26469706673582212209bd2f8ae5019e42d54897cd329a3ca8646828334ee8536b2b3fe99544dd43da664736f6c63430008140033";

let roid_address_smart_contract_instance : any;

const deploy_roid_address = async (platform_name : string) => {

    try{
        const public_wallet = await get_public_wallet();

        const contract = new web3.eth.Contract(roid_address_abi as any);
        const contract_instance = await contract.deploy({
            data: roid_address_bytecode,
            arguments: []
        })
        .send({
            from: public_wallet,
            gas: 5000000,      // 增加 gas 限制
            gasPrice: '900000000'    
        });

        roid_address_smart_contract_instance = new web3.eth.Contract(roid_address_abi as any, contract_instance.options.address);

        // storing address for API - verify_rp
        const storageFilePath = path.join(process.cwd(), 'roid_address.txt');
        await fs.writeFile(storageFilePath, contract_instance.options.address);

        console.log(`[deploy smart contract] roid_address deploy for '${platform_name}' at : ${contract_instance.options.address} [OK]`);

        return contract_instance.options.address;
    }catch(err){
        console.log(`[deploy smart contract] roid_address error : ${err}`);
    }
}

const get_roid_address = async (address : string) => {
    roid_address_smart_contract_instance = new web3.eth.Contract(roid_address_abi as any, address);
    return roid_address_smart_contract_instance;
}

// ================================ smart contract - ro_smartcontract  =================================================
const ro_smartcontract_abi = [
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_RO_id_hashing",
                "type": "string"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "InvalidInitialization",
        "type": "error"
    },
    {
        "inputs": [],
        "name": "NotInitializing",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            }
        ],
        "name": "OwnableInvalidOwner",
        "type": "error"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "account",
                "type": "address"
            }
        ],
        "name": "OwnableUnauthorizedAccount",
        "type": "error"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "string",
                "name": "message",
                "type": "string"
            }
        ],
        "name": "Debug",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "uint64",
                "name": "version",
                "type": "uint64"
            }
        ],
        "name": "Initialized",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
            },
            {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
    },
    {
        "inputs": [],
        "name": "RO_id_hashing",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            },
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "dataid_authgoals",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            },
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "dataid_authroles",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "name": "dataid_timestamp",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_RO_id_hashing",
                "type": "string"
            }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "data_id",
                "type": "string"
            },
            {
                "internalType": "string[]",
                "name": "authroles",
                "type": "string[]"
            },
            {
                "internalType": "string[]",
                "name": "authgoals",
                "type": "string[]"
            }
        ],
        "name": "set_data_auth",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "data_id",
                "type": "string"
            },
            {
                "internalType": "string[]",
                "name": "rp_auth_roles",
                "type": "string[]"
            },
            {
                "internalType": "string[]",
                "name": "rp_auth_goals",
                "type": "string[]"
            }
        ],
        "name": "verify_rp",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            },
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
];

const ro_smartcontract_bytecode = "";

const deploy_ro_smartcontract = async (RO_id_hashing : string) => {

    try{
        const public_wallet = await get_public_wallet();
        let ro_vaultBX_address = await (await roid_address_smart_contract_instance).methods.getVaultBX(RO_id_hashing).call();

        // get sign_tx of deploy smart contract by vaultBX wallet
        const contract = new web3.eth.Contract(ro_smartcontract_abi as any);
        const data = await contract.deploy({ data: ro_smartcontract_bytecode, arguments: [RO_id_hashing] }).encodeABI();
        const nonce = await web3.eth.getTransactionCount(ro_vaultBX_address, 'pending');

        const tx = {
            address_from: ro_vaultBX_address,
            address_to: null,  // 因為是部署合約，所以沒有接收地址
            chainID : "1337", 
            amount : "0",  
            gas_price : await web3.eth.getGasPrice(),  
            gas_limit : 10000000,  
            nonce : nonce,  
            data : data,  
            is_private : false 
        }

        let sign_tx = await send_sign_tx(RO_id_hashing, tx);
        let signed_transaction = sign_tx?.data.data.signed_transaction;
        console.log('[deploy_smart_contract] get signed_transaction to deploy the contract: ', signed_transaction);

        // send the sign_tx and deploy smart contract 
        const receipt = await web3.eth.sendSignedTransaction(signed_transaction as any);
        const contarct_address = receipt.contractAddress;
        console.log(`[deploy_smart_contract] roid_smartcontract deploy for "${RO_id_hashing}" at "${contarct_address}" [OK]`);
    
        // add to roid_address
        await (await roid_address_smart_contract_instance).methods.setSmartContract(RO_id_hashing, contarct_address).send({ from: public_wallet });

        console.log(`[smart contract method] roid_smartcontract use setSamrtContract mapping : ${RO_id_hashing} => ${contarct_address} [OK]`);

        return contarct_address;

    }catch(err){
        console.error(`[deploy smart contract] deploy_ro_smartcontract error : ${err}`);
    }
}

const get_ro_contract_address = async (ro_id_hashing : string) => {
    let ro_contract_address = await (await roid_address_smart_contract_instance).methods.getSmartContract(ro_id_hashing).call();

    if(ro_contract_address == "0x0000000000000000000000000000000000000000"){
        ro_contract_address = await deploy_ro_smartcontract(ro_id_hashing);
    }

    return ro_contract_address;
}

const get_ro_smart_contract_instance = async ( contract_address : string ) => {
    const ro_smartcontract_smart_contract_instance = new web3.eth.Contract(ro_smartcontract_abi as any, contract_address);
    return ro_smartcontract_smart_contract_instance;
}